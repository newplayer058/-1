#include<iostream>
using namespace std;
class seqlist {
public:
	seqlist(int Maxsize = 11);//初始化数组默认构造为是个数据
	~seqlist() { delete[]data; }//析构数组
	void InitList();//输入数组数据
	void max();//输出最大数据
	int select();//查询数据并输出有几个
	void dui();//输出是否对称
	void jiou();//将奇数排在偶数前面
	void insert(int x);
	void merge(seqlist& l1,seqlist& l2,seqlist& l3);
	void print();
private:
	int* data;            //顺序表的存放数组
	int maxsize;           //顺序表的最大元素数
	int last;               //顺序表当前已存数据项的最后位置(≥0)
	int count;				//输入数组数
};
void seqlist:: print()//数组的遍历
{
	for (int i = 0; i < maxsize; i++)
	{
		cout << data[i] << "\t";
	}
}
void seqlist::merge(seqlist& l1, seqlist& l2, seqlist& l3)//将两个顺序表合为一个顺序表
{
	int i=0; int k = 0;
	int j = 0;
	while (i < l1.maxsize && j < l2.maxsize)

		if (l1.data[i] <= l2.data[j])
		{
			l3.data[k++] = l1.data[i++];
		}
		else
			l3.data[k++] = l2.data[j++];
	while (i < l1.maxsize)
		l3.data[k++] = l1.data[i++];
	while (j < l2.maxsize)
		l3.data[k++] = l2.data[j++];
	l3.print();
}
void seqlist::insert(int x)//插入数据2
{
	count++;
	int temp;
	for (int n = 0; n < count; n++)
	{
		if (x < data[n])
		{
			temp = data[n];
			data[n] = x;
			x = temp;
		}
		if (data[n] == 0)
		{
			data[n] = x;
		}
	}
	for (int i = 0; i < maxsize; i++)
	{
		cout << endl<<data[i] << "\t";
	}
}
void seqlist::jiou()//奇数排在偶数前
{
	int i = 0, m = maxsize - 1, k;
	int temp;
	for (i = 0; i < maxsize; i++)
	{
		if (0 != (data[i] % 2))//从左到右开始检索遇到奇数则继续
		{
			continue;
		}
		else//遇到偶数暂停，从右到左检索奇数，检索到技术则与偶数对调
		{
			for (k = maxsize-1;k > i; k--)
			{
				if (0 != data[k] % 2)
				{
					temp = data[i];
					data[i] = data[k];
					data[k] = temp;
				}
				if (k == i)//如果标志相同则跳出循环输出数组
				{
					break;
				}
			}
		}
		
	}
	for (i = 0; i < maxsize; i++)//输出变序后数组
	{
		cout << data[i]<<endl;
	}
}
void seqlist::dui()
{
	int n,m;
	n = maxsize/2;
	for ( m = 0; m < n; m++)//将左部数据与右部数据一一对比，不同则跳出循环
	{
		if (data[m] == data[maxsize - m-1])
		{
			continue;
		}
		else cout << "输入链表不对称"; break;
	}
	if(m==n)
		cout << "输入链表对称";
}
int seqlist::select()//查找
{
	int x;
	int count = 0;
	cout << "请输入想查找的数据" << endl;
	cin >> x;
	for (int n = 0; n < maxsize; n++)//将所要查询的数据，与数组一一对比，有则继续，直到循环结束
	{
		if (x == data[n])
		{
			count++;			
		}
	}
	if (count == 0)
		return 0;
	else
	{
		cout << "有" << count << "个已知数据"<<endl;
		return count;
	}
}
seqlist::seqlist(int length) //顺序表类的构造函数
{  
	if (length > 0) {
		maxsize = length;          //顺序表长度
		last = -1;                 //未存储数据时为-1
		data = new int[maxsize];  //创建顺序表数组
	for (int i = 0; i < maxsize; i++)
	{
		data[i] = 0;
	}
	}
	last = length;
}
void seqlist::InitList()
{
	int i;
	
	cout << "请输入"<<maxsize<<"个整数,用空格分开:" << '\n';
	for (i = 0; i < maxsize; i++)//初始化数组
	{
		cin >> data[i];
		count++;
	}
	for (int i = 0; i < count; i++)
	{
		cout << data[i] <<"\t";
	}
}
void seqlist::max()
{
	int i, m;
	m = data[0];
	for (i = 1; i < 10; i++)//对比最大数据
	{
		if (data[i] > m)
			m = data[i];
	}
	cout << "你输入的10个整数最大是:" << m << '\n';
	cout << '\n';
}
int main()
{
	int b;
	seqlist a(2),c(2),d(4);
	a.InitList();
	c.InitList();
	a.max();
	b=a.select();
	cout << b<<endl;
	a.dui();
	a.jiou();
	a.insert(2);
	a.merge(a, c, d);
}
